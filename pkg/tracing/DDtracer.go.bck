package tracing

import (
	"github.com/aws/aws-sdk-go/aws/request"
	"gopkg.in/DataDog/dd-trace-go.v1/ddtrace"
	"gopkg.in/DataDog/dd-trace-go.v1/ddtrace/ext"
	"gopkg.in/DataDog/dd-trace-go.v1/ddtrace/tracer"
	"math"
	"strconv"
)

type HachiContext struct {
	Method string
	Path string
	Resource string
	ServiceName string
	ServiceType string
}

func Trace(hc HachiContext) error {

	opts := []ddtrace.StartSpanOption{
		tracer.ServiceName(hc.ServiceName),
		tracer.ResourceName(hc.Resource),
		tracer.SpanType(ext.SpanTypeWeb),
		tracer.Tag(ext.HTTPMethod, hc.Method),
		tracer.Tag(ext.HTTPURL, hc.Path),
		tracer.Measured(),
	}

	if !math.IsNaN(cfg.analyticsRate) {
		opts = append(opts, tracer.Tag(ext.EventSampleRate, cfg.analyticsRate))
	}
	if spanctx, err := tracer.Extract(tracer.HTTPHeadersCarrier(request.Header)); err == nil {
		opts = append(opts, tracer.ChildOf(spanctx))
	}
	var finishOpts []tracer.FinishOption
	if cfg.noDebugStack {
		finishOpts = append(finishOpts, tracer.NoDebugStack())
	}
	span, ctx := tracer.StartSpanFromContext(request.Context(), "http.request", opts...)
	defer func() { span.Finish(finishOpts...) }()

	// pass the span through the request context
	c.SetRequest(request.WithContext(ctx))
	err := next(c)
	if err != nil {
		finishOpts = append(finishOpts, tracer.WithError(err))
		// invokes the registered HTTP error handler
		c.Error(err)
	}

	span.SetTag(ext.HTTPCode, strconv.Itoa(c.Response().Status))
	return err
}