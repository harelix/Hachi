package internal

import (
	"github.com/rills-ai/Hachi/pkg/core"
	"github.com/rills-ai/Hachi/pkg/messages"
	"reflect"
	"testing"
)

func TestProcessIncomingCapsule(t *testing.T) {

	//capsule, _ := agent.BuildVerificationCapsuleForAgent()
	//fmt.Println(capsule)

	type args struct {
		capsule messages.Capsule
	}
	tests := []struct {
		name    string
		args    args
		want    core.ExecutionResponse
		wantErr bool
	}{
		// TODO: Add test cases.
		{

			name: "agent registration process",
			args: args{

				capsule: messages.Capsule{
					Message:   "",
					Headers:   nil,
					Selectors: nil,
					Route:     nil,
				},
			},
			want: core.ExecutionResponse{
				response: core.Ok,
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := core.ProcessIncomingCapsule(tt.args.capsule)
			if (err != nil) != tt.wantErr {
				t.Errorf("ProcessIncomingCapsule() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("ProcessIncomingCapsule() got = %v, want %v", got, tt.want)
			}
		})
	}
}
